# directive @hasScope(scopes: [String]) on OBJECT | FIELD_DEFINITION
directive @hasRole(roles: [Role]) on OBJECT | FIELD_DEFINITION
directive @isAuthenticated on OBJECT | FIELD_DEFINITION

type User
  @isAuthenticated { #using graphql authentication directive,, User data should only be available when the GraphQL request is authenticated.
  id: ID!
  name: String
  email: String!
  password: String!
  friends: [User] @relation(name: "FRIENDS", direction: "BOTH")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      #Cypher extends graphQL by accesses computations using Cypher query language,  Schema Directive to find all reviews that this user wrote and return the average number of stars they left on reviews
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  recommendations(first: Int = 3): [Business]
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) )WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec"
    )
}

type Business
  @hasRole(roles: [admin]) { #only users with the role admin can wuery business data
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
    )
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )

  starsByCategory(category: String): [StarCount]
    @cypher(
      statement: """
      MATCH (c:Category)<-[:IN_CATEGORY]-(:Business)<-[:REVIEWS]-(r:Review)
      WHERE toLower(c.name) CONTAINS toLower($category)
      WITH toString(r.stars) AS stars, COUNT(*) AS num
      RETURN {star: stars, count: num}
      """
    )
}
type Mutation {
  signup(username: String!, email: String!, password: String!): String
  login(email: String!, password: String!): String
}

type StarCount {
  star: Int
  count: Int
}

# First we add an enum with our different available roles to the GraphQL schema below:
# Then we use one or more of these roles in the directive for the Business typeDef above
enum Role {
  admin
  reader
  user
}

# Scopes are especially useful when we need to declare authorization rules on mutations. And in fact a role could map to a group of scopes. Using a @hasScope directive to declare authorization rules for a mutation would look something like this:

# type Mutation {
#   CreateBusiness(id: ID!, name: String): Business
#     @hasScope(scope: ["user:write"])
# }

# In order to create a Business, the user making the request must have the user:write scope.
